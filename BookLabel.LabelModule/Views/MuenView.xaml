<UserControl x:Class="BookLabel.LabelModule.Views.MuenView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:local="clr-namespace:BookLabel.LabelModule.Views"
             xmlns:model="clr-namespace:BookLabel.LabelModule.Models"
             xmlns:control="clr-namespace:BookLabel.LabelModule.Controls"
             xmlns:event="clr-namespace:BookLabel.LabelModule"
             xmlns:cmd="clr-namespace:BookLabel.LabelModule"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="1000">
    <UserControl.Resources>
        <Style x:Key="FIcon" TargetType="TextBlock">
            <Setter Property="FontFamily" Value="pack://application:,,,/Resource/#iconfont"></Setter>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="20"/>
        </Style>
        <Style  TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#A145F8"/>
            <Setter Property="Foreground" Value="White"/>
        </Style>
        <Style x:Key="ItemsContentBackground" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="AliceBlue"></Setter>
        </Style>
        <Style x:Key="TextForeground" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Foreground" Value="White"></Setter>
        </Style>
        <Style x:Key="ItemMouseOverBackground" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="#F20BA0"></Setter>
        </Style>
        <Style x:Key="ItemMouseOverForeground" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Foreground" Value="#FB0AE8"></Setter>
        </Style>

        <Style x:Key="ItemSelectedBackground" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="#12B512"></Setter>
        </Style>

        <Style x:Key="ItemSelectedForeground" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Foreground" Value="#FEDB11"></Setter>
        </Style>

        <Style x:Key="VerticalContentAlignment" TargetType="{x:Type TreeViewItem}">
            <Setter Property="VerticalAlignment" Value="Center"></Setter>
        </Style>

        <Style x:Key="FIconMenuItem" TargetType="{x:Type MenuItem}">
            <Setter Property="BorderBrush" Value="AliceBlue"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="#FEDB11"/>
            <Setter Property="Foreground" Value="#A145F8"/>
            <Setter Property="Height" Value="28"/>
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Margin" Value="1"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <!--Item-->
                        <Border  x:Name="border" Background="Transparent" Height="{TemplateBinding Height}" Opacity="1">
                            <Grid  VerticalAlignment="Center" Margin="{TemplateBinding Margin}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="icon_col" MaxWidth="35" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition Width="16" x:Name="arrow_col" SharedSizeGroup="MenumItemArrow"/>
                                </Grid.ColumnDefinitions>
                                <!--icon-->
                                <TextBlock x:Name="PART_Icon" Text="{TemplateBinding Icon}" Foreground="{TemplateBinding Foreground}" Margin="5,1,1,1"
                                       FontSize="22" Style="{StaticResource FIcon}"/>
                                <!--Header-->
                                <ContentPresenter Grid.Column="1" x:Name="txtHeader" Margin="3,1,5,1" MinWidth="90"
                                          RecognizesAccessKey="True" VerticalAlignment="Center" ContentSource="Header"/>
                                <!--快捷键 InputGestureText 暂不支持你了 -->
                                <TextBlock Grid.Column="2" Margin="3,1,3,1" x:Name="IGTHost" Text="{TemplateBinding InputGestureText}" 
                                       FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="Center" Visibility="Visible" Foreground="{TemplateBinding Foreground}" />
                                <!--右指针-->
                                <TextBlock x:Name="PART_Arrow" Grid.Column="3" Text="&#xe605;" Foreground="{TemplateBinding Foreground}" 
                                       FontSize="14" Style="{StaticResource FIcon}"/>
                                <!--淡出子集菜单容器-->
                                <Popup x:Name="SubMenuPopup" AllowsTransparency="true" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                        Placement="Bottom"  Focusable="false" VerticalOffset="0"
                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Border Background="{TemplateBinding Background}"  CornerRadius="0" Margin="5" 
                                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                            <StackPanel Margin="0" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                        <!--触发器-->
                        <ControlTemplate.Triggers>
                            <!--TopLevelHeader:第一级菜单（有子菜单）-->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                                <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                                <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                                <Setter Property="Width" Value="0" TargetName="arrow_col"/>
                            </Trigger>
                            <!--TopLevelItem 第一级菜单（无子级）-->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                                <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                                <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                                <Setter Property="Width" Value="0" TargetName="arrow_col"/>
                            </Trigger>
                            <!--SubmenuHeader:子菜单，有子菜单-->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="Visibility" Value="Visible" TargetName="PART_Arrow"/>
                                <Setter Property="Placement" Value="Right" TargetName="SubMenuPopup"/>
                            </Trigger>
                            <!--SubMenuItem:子菜单，无子级-->
                            <Trigger Property="Role" Value="SubMenuItem">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                            </Trigger>
                            <!--选中状态，优先级将高于Icon-->
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="PART_Icon" Value="&#xe62a;" Property="Text"></Setter>
                                <Setter TargetName="PART_Icon" Value="18" Property="FontSize"></Setter>
                                <Setter TargetName="PART_Icon" Value="White" Property="Foreground"></Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="border" Value="50" Property="Opacity"></Setter>
                            </Trigger>
                            <!--高亮状态-->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#F08000"></Setter>
                                <Setter Property="Foreground" Value="White"></Setter>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#F0A000"></Setter>
                                <Setter Property="Foreground" Value="White"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

       
        <!--基于FIconMenuItem的默认样式，提供Header模板-->
        <Style x:Key="DefaultMenuItem" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource FIconMenuItem}">
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock x:Name="txtHeader" FontSize="{Binding FontSize,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"
                               HorizontalAlignment="Stretch" Margin="3,1,5,1"
                               Text="{Binding Header,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}" VerticalAlignment="Center"
                               Foreground="{Binding Foreground,RelativeSource={RelativeSource AncestorType={x:Type MenuItem},Mode=FindAncestor}}"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!--TreeViewItem默认样式-->
        <Style  x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}">
            <Setter Property="IsExpanded" Value="{Binding IsExpanded}" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="Background" Value="#A145F8"/>
            <!--<Setter Property="Background" Value="#771C79"/>-->
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Margin" Value="2" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <StackPanel>
                            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                MinHeight="{TemplateBinding MinHeight}" UseLayoutRounding="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <!--多层级间隔，暂缓-->
                                <!--<Grid Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                                <Grid Margin="{TemplateBinding Margin}" VerticalAlignment="Stretch">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="20" Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <!--展开收缩按钮-->
                                    <ToggleButton x:Name="ExpanderBtn" 
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                              ClickMode="Press" >
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Border>
                                                    <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Border>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                        <ToggleButton.Content>
                                            <TextBlock x:Name="ExpanderIcon"  Text="&#xe6a6;" Style="{DynamicResource FIcon}"   />
                                        </ToggleButton.Content>
                                    </ToggleButton>
                                    <!--内容-->
                                    <ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Grid>
                            </Border>
                            <ItemsPresenter Margin="18,0,0,0" x:Name="ItemsHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="False">
                                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="IsExpanded" Value="True">
                                <Setter TargetName="ExpanderIcon" Property="Text" Value="&#xe6c9;" />
                            </Trigger>
                            <Trigger Property="HasItems" Value="False">
                                <Setter TargetName="ExpanderIcon" Property="Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#F08000" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="#F0A000" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="Selector.IsSelectionActive" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="#F0A000" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--TreeView样式-->
        <Style x:Key="DefaultTreeView" TargetType="{x:Type TreeView}">
            <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
            <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"></Setter>
            <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
            <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
            <Setter Property="Background" Value="#007AC0"/>
            <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultTreeViewItem}"></Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel IsItemsHost="True" IsVirtualizing="True" VirtualizationMode="Recycling" Margin="0"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <HierarchicalDataTemplate x:Key="ItemNode"  DataType="{x:Type model:CatalogConstruction}" ItemsSource="{Binding ChirdCatalogs}" >
            <StackPanel Orientation="Horizontal" >
                <TextBlock Text="&#xe69a;" Style="{DynamicResource FIcon}"/>
                <control:EditableTextBox Text="{Binding CatalogName}" IsEditable="True" IsInEditMode="{Binding IsInEditMode, Mode=TwoWay}"  
                                         FontSize="12" MinWidth="100" VerticalAlignment="Center" CompletedCommand="{Binding DataContext.OnTextModifyCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                   CompletedCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorLevel=2, AncestorType={x:Type control:EditableTextBox}}}">
                    <!--<i:Interaction.Triggers>
                        <i:EventTrigger EventName="OnTextModifyComplete">
                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=DataContext.OnTextModifyComplete}"
                                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorLevel=1, AncestorType={x:Type control:EditableTextBox}}}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>-->
                </control:EditableTextBox>
            </StackPanel>
        </HierarchicalDataTemplate>
    </UserControl.Resources>
    <Grid>
        
        <Grid.ColumnDefinitions>
            <ColumnDefinition MinWidth="200" Width="Auto"/>
            <ColumnDefinition Width="1"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Border Grid.Row="1"
                BorderBrush="#FF4355C1"
                BorderThickness="2,2,2,2"
                CornerRadius="4,4,4,4"
                Margin="8,2,2,8">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Button Content="新增目录" Command="{Binding InsertCatalogCommand}" Height="24"/>
                <TreeView Grid.Row="1" Width="250"  Margin="3" x:Name="tree1"   Style="{StaticResource DefaultTreeView}"
                  ItemTemplate="{StaticResource ItemNode}"   Background="Transparent" 
                  ItemsSource="{Binding Catalogs}"  event:TreeViewBehavior.DoubleClickAction="{Binding MouseDoubleClick}"
                  event:TreeViewBehavior.SelectionChangedAction="{Binding SelectionChangedAction }">
                    <TreeView.ContextMenu>
                        <ContextMenu>
                            <MenuItem  Icon="&#xe6c0;"  Header="增加" Command="{Binding InsertChirdCommand}"  Style="{DynamicResource DefaultMenuItem}"/>
                            <MenuItem  Icon="&#xe6a1;" Header="修改" Command="{Binding UpdateCatalogCommand}"  Style="{DynamicResource DefaultMenuItem}"/>
                            <MenuItem  Icon="&#xe69f;" Header="删除" Command="{Binding DeleteCatalogCommand}" Style="{DynamicResource DefaultMenuItem}"/>
                        </ContextMenu>
                    </TreeView.ContextMenu>
                </TreeView>
                <TextBlock Grid.Row="2" Text="标签"/>
                <ListBox Grid.Row="3" ItemsSource="{Binding BookLables}" SelectedItem="{Binding SelectedLabel}"/>
            </Grid>
           
        </Border>
        <GridSplitter Grid.Row="1"
                      Grid.Column="1"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Stretch"
                      Background="{x:Null}"
                      Grid.RowSpan="2" />
        <Border Margin="2,2,8,8"
                Grid.Column="2"
                Grid.Row="1"
                BorderThickness="2,2,2,2"
                CornerRadius="4,4,4,4"
                BorderBrush="#FF4355C1"
                
                Grid.RowSpan="2">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="50"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <GroupBox Header="单本加入" Foreground="White">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="名称" Foreground="White" Height="20"/>
                        <TextBox Margin="5,0,0,0"  Text="{Binding LableName}" Width="100"  Height="20"/>
                        <TextBlock Margin="5,0,0,0"  Text="地址" Foreground="White" Height="20"/>
                        <TextBox Margin="5,0,0,0"  Text="{Binding LabelPath}"  Width="200"  Height="20"/>
                        <Button Margin="5,0,0,0" Content="文件" Command="{Binding OpenFileCommand}" Width="60" Height="20"/>
                        <Button Margin="15,0,0,0" Content="增加" Command="{Binding AddBoolLabelCommand}" Width="60"  Height="20"/>
                        <Button Margin="15,0,0,0"  Content="删除" Command="{Binding DeleteBoolLabelCommand}" Width="60"  Height="20"/>
                    </StackPanel>
                </GroupBox>
                <GroupBox Header="批量拖拽" Grid.Row="1" Foreground="White">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="30"/>
                        </Grid.RowDefinitions>
                        <TextBox Text="{Binding DropName}"  AllowDrop="True" TextWrapping="Wrap" 
                                 event:TextBoxBehavior.PreviewDragOverAction="{Binding PreviewDragOverCommand}"
                                 event:TextBoxBehavior.PreviewDropAction="{Binding PreviewDropCommand}"/>
                        <!--<TextBox Text="{Binding DropName}"  AllowDrop="True" TextWrapping="Wrap" >
                        <i:Interaction.Behaviors>
                               
                            </i:Interaction.Behaviors>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewDragOver">
                                    <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl},Path=DataContext.PreviewDragOverCommand}"
                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorLevel=1, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewDrop">
                                    <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl},Path=DataContext.PreviewDropCommand}"
                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorLevel=1, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="GotFocus">
                                    <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl},Path=DataContext.GotFocus}"
                                   CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorLevel=1, AncestorType={x:Type TextBox}}}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </TextBox>-->
                        <StackPanel  Grid.Row="1"  Orientation="Horizontal">
                            <TextBlock Text="设置标签"/>
                            <TextBox Text="{Binding BookLabel}" Width="300"/>
                            <Button Content="添加" Width="60" HorizontalAlignment="Right" Command="{Binding BatchInsertCommand}"/>
                            <Button Content="编辑" Margin="5,0,0,0" Width="60" HorizontalAlignment="Right" Command="{Binding BatchInsertCommand}"/>
                        </StackPanel>
                    </Grid>
                </GroupBox>
                <DataGrid Grid.Row="2" DataContext="{Binding ElementName=tree1, Path=SelectedItem}" ItemsSource="{Binding BookLabelDetails}"
                           EnableColumnVirtualization="False"
                                           EnableRowVirtualization="True"
                                           VirtualizingStackPanel.VirtualizationMode="Standard"
                                           AutoGenerateColumns="False"
                                           CanUserResizeRows="False"
                                           SelectionUnit="FullRow"
                                           CanUserResizeColumns="True" 
                          SelectedItem="{Binding SelectedBookLabel}">
                    <DataGrid.Columns>
                        <DataGridTemplateColumn Header="名称"  Width="60">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding BoolLabelName}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                        <DataGridTemplateColumn Header="地址"  Width="*">
                            <DataGridTemplateColumn.CellTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding LabelPath}"/>
                                </DataTemplate>
                            </DataGridTemplateColumn.CellTemplate>
                        </DataGridTemplateColumn>
                    </DataGrid.Columns>
                </DataGrid>
            </Grid>
        </Border>
    </Grid>
</UserControl>
